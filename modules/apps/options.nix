# modules/home-manager/apps/options.nix
{lib, ...}: {
  #############################################################
  # Option for the constants provided by this module
  #############################################################
  myConstants = lib.mkOption {
    type = lib.types.attrs;
    readOnly = true;
    description = "A set of common constants, primarily related to applications, made available by the 'apps' module.";
  };

  #############################################################
  # Option defining the structure of each processed
  # application entry in `config.applications`.
  #############################################################
  applications = lib.mkOption {
    description = "Attribute set defining all configured and processed applications. Each key is a unique application identifier (appKey).";
    default = {}; # Default to an empty set of applications
    type = lib.types.attrsOf (lib.types.submodule (_appKeyArgs: {
      # appKeyArgs.name is the appKey (e.g., "signal", "eTextEditor")
      # appKeyArgs.config is the full attrset for this app entry
      options = {
        #################################################################################
        # --- Core Identifiers (from simplified config or set by apps/default.nix)  ---
        #################################################################################

        id = lib.mkOption {
          type = lib.types.str;
          description = "The primary identifier used by helpers (e.g., package name, Flatpak ID, URL, or a logical name).";
        };

        type = lib.mkOption {
          type = lib.types.enum ["nix" "flatpak" "pwa" "externally-managed" "custom"];
          default = "externally-managed";
          description = ''
            Determines how this application is handled:
              • "nix"             → Launch a Nix‐installed package
              • "flatpak"         → Launch a Flatpak ID (including PWAs via Flatpak runner)
              • "pwa"             → Launch a URL as a PWA
              • "externally-managed" → Wrap an already‐installed binary or script
              • "custom"          → Use a user‐provided launchCommand
          '';
        };

        vpn = lib.mkOption {
          type = lib.types.nullOr (lib.types.submodule {
            options = {
              enabled = lib.mkOption {
                type = lib.types.bool;
                default = false;
                description = "Whether this app should run through VPN";
              };
              provider = lib.mkOption {
                type = lib.types.str;
                default = "protonvpn";
                description = "VPN provider to use (e.g., protonvpn, azirevpn, mullvad)";
              };
              server = lib.mkOption {
                type = lib.types.str;
                default = "us";
                description = "VPN server location to connect to";
              };
              protocol = lib.mkOption {
                type = lib.types.enum ["openvpn" "wireguard"];
                default = "openvpn";
                description = "VPN protocol to use";
              };
            };
          });
          default = null;
          description = "VPN configuration for this application";
        };
        key = lib.mkOption {
          type = lib.types.nullOr lib.types.str;
          default = null;
          description = "Optional: Hint for Sway keybindings. If null, appKey is often used as a default by Sway config logic.";
        };

        #################################################################################
        # --- Behavior (derived by apps/default.nix from autostartPriority)          ---
        #################################################################################

        autostart = lib.mkOption {
          type = lib.types.bool;
          description = "Whether this application should be autostarted (derived from autostartPriority in simplified config).";
        };

        autostartPriority = lib.mkOption {
          type = lib.types.nullOr lib.types.int;
          default = null; # If null in simplified config, autostart is false.
          description = "Numerical priority for autostarting (lower means earlier). From simplified config.";
        };

        #################################################################################
        # --- Execution                                                           ---
        #################################################################################

        launchCommand = lib.mkOption {
          type = lib.types.str;
          description = "The final 'exec ...' command string used to launch this application, generated by helpers.";
        };

        appId = lib.mkOption {
          # This is the top-level appId, mirrors appInfo.appId
          type = lib.types.oneOf [lib.types.str lib.types.listOf lib.types.str];
          description = "The application ID(s) for Sway/window management (WM_CLASS), same as appInfo.appId.";
        };

        #################################################################################
        # --- Detailed Application Information (populated by helpers)               ---
        #################################################################################

        appInfo = lib.mkOption {
          type = lib.types.submodule ({name, ...}: {
            # 'name' here refers to the 'appInfo' attribute itself
            options = {
              name = lib.mkOption {
                type = lib.types.str;
                description = "Internal/display name for the application, often derived from its 'id' (e.g., for .desktop Name= field).";
              };

              installMethod = lib.mkOption {
                type = lib.types.enum [
                  "nix-package" # For id found in pkgs
                  "nix-custom-path" # For explicit executablePath
                  "nix-via-homePackages" # When appDefHomePackages is primary source
                  "flatpak" # For Flatpak apps (including PWAs via Flatpak runner)
                  "none" # For externally-managed or if Nix install method is N/A
                  "custom" # For type="custom" definitions from simplified config
                ];
                description = "Derived method by which the application's package is managed/installed.";
              };

              package = lib.mkOption {
                type = lib.types.str;
                description = "The primary package identifier associated with this app (e.g., for .desktop Icon=, package installation).";
              };

              appId = lib.mkOption {
                # This is appInfo.appId
                type = lib.types.oneOf [lib.types.str lib.types.listOf lib.types.str];
                description = "The application ID(s) for Sway/window management (WM_CLASS).";
              };

              title = lib.mkOption {
                # For Sway window title matching, if used
                type = lib.types.nullOr lib.types.str;
                default = null;
                description = "Optional: Specific window title string for Sway matching (rarely set by helpers).";
              };

              isTerminalApp = lib.mkOption {
                type = lib.types.bool;
                default = false;
                description = "Whether this application is launched within a terminal.";
              };
            };
          });
          description = "Detailed, derived information about the application.";
        };

        #################################################################################
        # --- Desktop File Configuration (populated by helpers, merged with user input) ---
        #################################################################################

        desktopFile = lib.mkOption {
          type = lib.types.submodule (_: {
            # name here is desktopFile
            options = {
              generate = lib.mkOption {
                type = lib.types.bool;
                default = false;
                description = "Whether a .desktop file should be generated.";
              };

              displayName = lib.mkOption {
                type = lib.types.nullOr lib.types.str;
                default = null;
                description = "'Name=' field for generated .desktop file.";
              };

              # --- ADDITION IS HERE ---
              genericName = lib.mkOption {
                type = lib.types.nullOr lib.types.str;
                default = null;
                description = "'GenericName=' field for the .desktop file.";
              };

              comment = lib.mkOption {
                type = lib.types.nullOr lib.types.str;
                default = null;
                description = "'Comment=' field.";
              };

              iconName = lib.mkOption {
                type = lib.types.nullOr lib.types.str;
                default = null;
                description = "'Icon=' field (usually appInfo.package).";
              };

              categories = lib.mkOption {
                type = lib.types.listOf lib.types.str;
                default = ["Utility"];
                description = "'Categories=' field.";
              };

              defaultAssociations = lib.mkOption {
                type = lib.types.listOf lib.types.str;
                default = [];
                description = "MIME types this app should be default handler for.";
              };

              isDefaultHandler = lib.mkOption {
                type = lib.types.bool;
                default = false;
                description = "Set as default handler for 'defaultAssociations'?";
              };

              desktopExecArgs = lib.mkOption {
                type = lib.types.nullOr lib.types.str;
                default = null;
                description = "Additional arguments for the 'Exec=' line in generated .desktop files (appended after command).";
              };

              targetDesktopFilename = lib.mkOption {
                type = lib.types.nullOr lib.types.str;
                default = null;
                description = "Filename of an existing .desktop file for MIME association, or the name for the generated one (e.g., 'app-id.desktop').";
              };
            };
          });
          default = {}; # Defaults are set by mkDefaultDesktopFileAttrs and merged with user input
          description = "Configuration for the application's .desktop file.";
        };

        #################################################################################
        # --- Nix Packages                                                            ---
        #################################################################################

        homePackages = lib.mkOption {
          type = lib.types.listOf lib.types.package;
          default = [];
          description = "Final list of Nix packages to be installed for this application (includes appDefHomePackages and potentially others).";
        };

        appDefHomePackages = lib.mkOption {
          # For reference/debugging, shows what came from simplifiedConf
          type = lib.types.listOf lib.types.package;
          default = [];
          description = "Original list of Nix packages specified in the app's simplified definition file.";
        };

        #################################################################################
        # --- Flatpak Specific                                                         ---
        #################################################################################

        flatpakOverride = lib.mkOption {
          type = lib.types.nullOr lib.types.attrs;
          default = null;
          description = "App-specific Flatpak override content (from simplified config), merged into global overrides.";
        };
      };
    }));
  };
}
